name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

env:
  TERRAFORM_DIR: ./terraform # Variable pour le dossier Terraform

  AWS_REGION: eu-west-1
  ECS_SERVICE: std-ecs-service 
  ECS_CLUSTER: std-ecs-cluster             
  ECS_TASK_DEFINITION: std-ecs-task  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: std-ecs-chat


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.TERRAFORM_DIR }}

  docker:
    name: "Docker Build and Push"
    runs-on: ubuntu-latest
    needs: terraform # Assure que Terraform s'ex√©cute avant Docker
    permissions:
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Docker Image
        working-directory: ./server
        run: docker build . --pull -t chat-server:latest

      - name: Github Login
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag Docker Image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker tag chat-server:latest ghcr.io/${REPO_NAME}/chat-server:latest
          docker tag chat-server:latest ghcr.io/${REPO_NAME}/chat-server:${{ github.sha }}

      - name: Push Docker Image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: build-image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/${REPO_NAME}/chat-server:latest
          docker push ghcr.io/${REPO_NAME}/chat-server:${{ github.sha }}
          echo "image=ghcr.io/${REPO_NAME}/chat-server:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{env.ECS_TASK_DEFINITION}} --query taskDefinition > task-definition.json


      - name: Fill in the new image ID in the Amazon ECS task definition
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
