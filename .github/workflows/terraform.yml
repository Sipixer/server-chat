name: "Terraform and Docker Build"

on:
  push:
    branches:
      - main
  pull_request:

env:
  TERRAFORM_DIR: ./terraform # Variable pour le dossier Terraform

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check for Terraform Changes
        id: check-changes
        run: |
          git diff --quiet HEAD^ HEAD -- ${{ env.TERRAFORM_DIR }}
          echo "CHANGED=$?" >> $GITHUB_ENV

      - name: Setup Terraform
        if: env.CHANGED == '0'
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        if: env.CHANGED == '0'
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Init
        if: env.CHANGED == '0'
        id: init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Validate
        if: env.CHANGED == '0'
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Plan
        if: github.event_name == 'pull_request' && env.CHANGED == '0'
        id: plan
        run: terraform plan -no-color -input=false
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true

      - name: Update Pull Request
        if: github.event_name == 'pull_request' && env.CHANGED == '0'
        uses: actions/github-script@v6
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.CHANGED == '0'
        id: apply
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.TERRAFORM_DIR }}

  docker:
    name: "Docker Build and Push"
    runs-on: ubuntu-latest
    needs: terraform # Assure que Terraform s'ex√©cute avant Docker
    permissions:
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        working-directory: ./server
        run: docker build . --pull -t chat-server:latest

      - name: Github Login
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Tag Docker Image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker tag chat-server:latest ghcr.io/${REPO_NAME}/chat-server:latest

      - name: Push Docker Image
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/${REPO_NAME}/chat-server:latest
